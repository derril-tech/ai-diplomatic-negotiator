from celery import shared_task
from typing import Dict, Any
import structlog
import json

logger = structlog.get_logger()

@shared_task
def render_report(package: Dict[str, Any], format: str = 'md') -> Dict[str, Any]:
    """Render a package into the requested format (md, pdf, csv, json)."""
    logger.info("Rendering report", format=format)
    try:
        if format == 'json':
            content = json.dumps(package, indent=2)
            mime = 'application/json'
            ext = 'json'
        elif format == 'md':
            lines = [f"# {package.get('title','Final Package')}"]
            lines.append('')
            lines.append('## Summary')
            lines.append(f"- Parties: {', '.join(package.get('summary',{}).get('parties', []))}")
            lines.append(f"- Issues: {', '.join(package.get('summary',{}).get('issues', []))}")
            lines.append(f"- Basis: {package.get('summary',{}).get('recommendation_basis', 'n/a')}")
            lines.append('')
            lines.append('## Selected Offers')
            for o in package.get('selected_offers', []):
                lines.append(f"- Issue {o.get('issue_id')}: {o.get('proposed_value')} (conf {int((o.get('confidence') or 0)*100)}%)")
            lines.append('')
            lines.append('## Risk Notes')
            for r in package.get('risk_notes', []):
                lines.append(f"- {r.get('issue_id')}: {r.get('note')} ({int((r.get('expected_impact') or 0)*100)}%)")
            content = "\n".join(lines)
            mime = 'text/markdown'
            ext = 'md'
        elif format == 'csv':
            header = 'issue_id,proposed_value,confidence'\
            
            lines = [header]
            for o in package.get('selected_offers', []):
                lines.append(f"{o.get('issue_id')},{o.get('proposed_value')},{o.get('confidence',0)}")
            content = "\n".join(lines)
            mime = 'text/csv'
            ext = 'csv'
        else:  # pdf stub
            content = '%PDF-1.7\n% Stub PDF generated by reporter.\n'
            mime = 'application/pdf'
            ext = 'pdf'

        return {
            'status': 'success',
            'mime': mime,
            'extension': ext,
            'content': content
        }
    except Exception as e:
        logger.error("Report rendering failed", error=str(e))
        return { 'status': 'failed', 'error': str(e) }
