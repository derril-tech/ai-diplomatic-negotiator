version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: diplomatic_negotiator_postgres
    environment:
      POSTGRES_DB: diplomatic_negotiator
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and Celery broker
  redis:
    image: redis:7-alpine
    container_name: diplomatic_negotiator_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # NATS for messaging
  nats:
    image: nats:2-alpine
    container_name: diplomatic_negotiator_nats
    ports:
      - "4222:4222"
      - "8222:8222"
    command: ["-js", "-m", "8222"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8222/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO for object storage
  minio:
    image: minio/minio:latest
    container_name: diplomatic_negotiator_minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Frontend (Next.js)
  frontend:
    build:
      context: ./apps/frontend
      dockerfile: Dockerfile.dev
    container_name: diplomatic_negotiator_frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:3001
      - NEXT_PUBLIC_WS_URL=ws://localhost:3001
    volumes:
      - ./apps/frontend:/app
      - /app/node_modules
    depends_on:
      - gateway
    profiles:
      - frontend

  # Gateway (NestJS)
  gateway:
    build:
      context: ./apps/gateway
      dockerfile: Dockerfile.dev
    container_name: diplomatic_negotiator_gateway
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=diplomatic_negotiator
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - FRONTEND_URL=http://localhost:3000
    volumes:
      - ./apps/gateway:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    profiles:
      - backend

  # Orchestrator (FastAPI)
  orchestrator:
    build:
      context: ./apps/orchestrator
      dockerfile: Dockerfile.dev
    container_name: diplomatic_negotiator_orchestrator
    ports:
      - "3002:3002"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/diplomatic_negotiator
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - GATEWAY_URL=http://gateway:3001
      - WORKERS_URL=http://workers:3003
    volumes:
      - ./apps/orchestrator:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    profiles:
      - backend

  # Workers (Celery)
  workers:
    build:
      context: ./apps/workers
      dockerfile: Dockerfile.dev
    container_name: diplomatic_negotiator_workers
    ports:
      - "3003:3003"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/diplomatic_negotiator
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - ORCHESTRATOR_URL=http://orchestrator:3002
      - GATEWAY_URL=http://gateway:3001
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
    volumes:
      - ./apps/workers:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    profiles:
      - backend

volumes:
  postgres_data:
  redis_data:
  minio_data:
